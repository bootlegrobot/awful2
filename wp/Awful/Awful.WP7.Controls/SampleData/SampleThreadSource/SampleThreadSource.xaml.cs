//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleThreadSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleThreadSource { }
#else

	public class SampleThreadSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleThreadSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Awful.WP7.Controls;component/SampleData/SampleThreadSource/SampleThreadSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Threads _Threads = new Threads();

		public Threads Threads
		{
			get
			{
				return this._Threads;
			}
		}
	}

	public class ThreadsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}

		private string _Author = string.Empty;

		public string Author
		{
			get
			{
				return this._Author;
			}

			set
			{
				if (this._Author != value)
				{
					this._Author = value;
					this.OnPropertyChanged("Author");
				}
			}
		}

		private string _Info = string.Empty;

		public string Info
		{
			get
			{
				return this._Info;
			}

			set
			{
				if (this._Info != value)
				{
					this._Info = value;
					this.OnPropertyChanged("Info");
				}
			}
		}

		private System.Windows.Media.ImageSource _Image = null;

		public System.Windows.Media.ImageSource Image
		{
			get
			{
				return this._Image;
			}

			set
			{
				if (this._Image != value)
				{
					this._Image = value;
					this.OnPropertyChanged("Image");
				}
			}
		}

		private string _ColorCategory = string.Empty;

		public string ColorCategory
		{
			get
			{
				return this._ColorCategory;
			}

			set
			{
				if (this._ColorCategory != value)
				{
					this._ColorCategory = value;
					this.OnPropertyChanged("ColorCategory");
				}
			}
		}

		private string _InfoColor = string.Empty;

		public string InfoColor
		{
			get
			{
				return this._InfoColor;
			}

			set
			{
				if (this._InfoColor != value)
				{
					this._InfoColor = value;
					this.OnPropertyChanged("InfoColor");
				}
			}
		}
	}

	public class Threads : System.Collections.ObjectModel.ObservableCollection<ThreadsItem>
	{ 
	}
#endif
}
